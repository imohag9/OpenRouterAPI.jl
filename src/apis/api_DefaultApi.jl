# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "https://openrouter.ai/api/v1"

const _returntypes_chat_completions_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_chat_completions(_api::DefaultApi,api_key::String, chat_completions_request::ChatCompletionsRequest; _mediaType=nothing,site_url::String="",site_name::String="")
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_chat_completions_DefaultApi, "/chat/completions", [], chat_completions_request)
    OpenAPI.Clients.set_param(_ctx.header, "Authorization", "Bearer: " * api_key)
    (site_url !== "") && OpenAPI.Clients.set_param(_ctx.header, "HTTP-Referer", site_url)
    (site_name !== "") && OpenAPI.Clients.set_param(_ctx.header, "X-Title", site_name)

    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""chat/completions

chat/completions

Params:
- chat_completions_request::ChatCompletionsRequest

Return: Any, OpenAPI.Clients.ApiResponse
"""
function chat_completions(_api::DefaultApi,api_key::String, chat_completions_request::ChatCompletionsRequest; _mediaType=nothing,site_url::String="",site_name::String="")
    _ctx = _oacinternal_chat_completions(_api,api_key, chat_completions_request; _mediaType=_mediaType,site_url=site_url,site_name=site_name)
    return OpenAPI.Clients.exec(_ctx)
end

function chat_completions(_api::DefaultApi, response_stream::Channel,api_key::String, chat_completions_request::ChatCompletionsRequest; _mediaType=nothing,site_url::String="",site_name::String="")
    _ctx = _oacinternal_chat_completions(_api,api_key, chat_completions_request; _mediaType=_mediaType,site_url=site_url,site_name=site_name)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_get_credits(_api::DefaultApi,api_key::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_credits_DefaultApi, "/credits", [])
    OpenAPI.Clients.set_param(_ctx.header, "Authorization", "Bearer: " * api_key)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get credits

Returns the total credits purchased and used for the authenticated user

Params:

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_credits(_api::DefaultApi,api_key::String; _mediaType=nothing)
    _ctx = _oacinternal_get_credits(_api,api_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_credits(_api::DefaultApi,api_key::String, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_credits(_api,api_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_current_key_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("401", "x"=>".") * "\$") => Any,
    Regex("^" * replace("405", "x"=>".") * "\$") => Any,
    Regex("^" * replace("500", "x"=>".") * "\$") => Any,
)

function _oacinternal_get_current_key(_api::DefaultApi,api_key::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_current_key_DefaultApi, "/key", [])
    OpenAPI.Clients.set_param(_ctx.header, "Authorization", "Bearer: " * api_key)

    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get current API key

Get information on the API key associated with the current authentication session

Params:

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_current_key(_api::DefaultApi,api_key::String; _mediaType=nothing)
    _ctx = _oacinternal_get_current_key(_api,api_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_current_key(_api::DefaultApi,api_key::String, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_current_key(_api,api_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_models_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_get_models(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_models_DefaultApi, "/models", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List available models

Returns a list of models available through the API

Params:

Return: Any, OpenAPI.Clients.ApiResponse
"""
function get_models(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_get_models(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_models(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_models(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_text_completion_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_text_completion(_api::DefaultApi,api_key::String, text_completion_request::TextCompletionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_text_completion_DefaultApi, "/completions", [], text_completion_request)
    OpenAPI.Clients.set_param(_ctx.header, "Authorization", "Bearer: " * api_key)

    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""/completions

Send a completion request to a selected model (text-only format)

Params:
- text_completion_request::TextCompletionRequest

Return: Any, OpenAPI.Clients.ApiResponse
"""
function text_completion(_api::DefaultApi,api_key::String, text_completion_request::TextCompletionRequest; _mediaType=nothing)
    _ctx = _oacinternal_text_completion(_api,api_key, text_completion_request;_mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function text_completion(_api::DefaultApi,api_key::String, response_stream::Channel,text_completion_request::TextCompletionRequest; _mediaType=nothing)
    _ctx = _oacinternal_text_completion(_api,api_key, text_completion_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export chat_completions
export get_credits
export get_current_key
export get_models
export text_completion
