# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Response_format_json_schema

    ResponseFormatJsonSchema(;
        name=nothing,
        strict=true,
        schema=nothing,
    )

    - name::String
    - strict::Bool
    - schema::Any
"""
Base.@kwdef mutable struct ResponseFormatJsonSchema <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    strict::Union{Nothing, Bool} = true
    schema::Union{Nothing, Any} = nothing

    function ResponseFormatJsonSchema(name, strict, schema, )
        o = new(name, strict, schema, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ResponseFormatJsonSchema

const _property_types_ResponseFormatJsonSchema = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("strict")=>"Bool", Symbol("schema")=>"Any", )
OpenAPI.property_type(::Type{ ResponseFormatJsonSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ResponseFormatJsonSchema[name]))}

function OpenAPI.check_required(o::ResponseFormatJsonSchema)
    o.name === nothing && (return false)
    o.strict === nothing && (return false)
    o.schema === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ResponseFormatJsonSchema)
    OpenAPI.validate_property(ResponseFormatJsonSchema, Symbol("name"), o.name)
    OpenAPI.validate_property(ResponseFormatJsonSchema, Symbol("strict"), o.strict)
    OpenAPI.validate_property(ResponseFormatJsonSchema, Symbol("schema"), o.schema)
end

function OpenAPI.validate_property(::Type{ ResponseFormatJsonSchema }, name::Symbol, val)



end
