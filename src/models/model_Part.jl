# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Part

    Part(;
        type=nothing,
        text=nothing,
        image_url=nothing,
        file=nothing,
    )

    - type::String
    - text::String
    - image_url::PartImageUrl
    - file::PartFile
"""
Base.@kwdef mutable struct Part <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    image_url = nothing # spec type: Union{ Nothing, PartImageUrl }
    file = nothing # spec type: Union{ Nothing, PartFile }

    function Part(type, text, image_url, file, )
        o = new(type, text, image_url, file, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Part

const _property_types_Part = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("text")=>"String", Symbol("image_url")=>"PartImageUrl", Symbol("file")=>"PartFile", )
OpenAPI.property_type(::Type{ Part }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Part[name]))}

function OpenAPI.check_required(o::Part)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::Part)
    OpenAPI.validate_property(Part, Symbol("type"), o.type)
    OpenAPI.validate_property(Part, Symbol("text"), o.text)
    OpenAPI.validate_property(Part, Symbol("image_url"), o.image_url)
    OpenAPI.validate_property(Part, Symbol("file"), o.file)
end

function OpenAPI.validate_property(::Type{ Part }, name::Symbol, val)

    if name === Symbol("type")
        OpenAPI.validate_param(name, "Part", :enum, val, ["text", "image_url", "file"])
    end




end
