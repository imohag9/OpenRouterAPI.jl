# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Tool
Tool Description

    Tool(;
        type=nothing,
        var"function"=nothing,
    )

    - type::String
    - var"function"::FunctionDescription
"""
Base.@kwdef mutable struct Tool <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    var"function" = nothing # spec type: Union{ Nothing, FunctionDescription }

    function Tool(type, var"function", )
        o = new(type, var"function", )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Tool

const _property_types_Tool = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("function")=>"FunctionDescription", )
OpenAPI.property_type(::Type{ Tool }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Tool[name]))}

function OpenAPI.check_required(o::Tool)
    o.type === nothing && (return false)
    o.var"function" === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::Tool)
    OpenAPI.validate_property(Tool, Symbol("type"), o.type)
    OpenAPI.validate_property(Tool, Symbol("function"), o.var"function")
end

function OpenAPI.validate_property(::Type{ Tool }, name::Symbol, val)

    if name === Symbol("type")
        OpenAPI.validate_param(name, "Tool", :enum, val, ["function"])
    end


end
